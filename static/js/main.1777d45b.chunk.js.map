{"version":3,"sources":["apis/fetcher.ts","apis/useInfiniteQuestions.ts","apis/useTags.ts","questionSearch/Questions.tsx","questionSearch/Tags.tsx","questionSearch/index.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["stackoverflowEndpoint","fetcher","path","params","a","queryString","qs","stringify","reject","isEmpty","url","fetch","res","ok","error","Error","json","info","status","useInfiniteQuestions","tagged","useMemo","useSWRInfinite","pageIndex","previousPageData","has_more","createGetKey","swrOptions","useTags","inname","useSWR","Question","props","question","score","answer_count","view_count","title","link","is_answered","owner","display_name","profile_image","mt","href","target","fontWeight","columns","minChildWidth","color","undefined","d","p","bg","border","textAlign","flexWrap","justifyContent","w","src","fontSize","Questions","questions","map","question_id","Tags","tags","curTag","handleTagOnClick","spacing","tag","cursor","colorScheme","name","onClick","TagsAndQuestions","useState","items","setCurTag","questionsArr","data","setSize","isValidating","h","overflow","thickness","speed","emptyColor","size","length","s","Index","search","setSearch","maxW","margin","value","onChange","e","placeholder","revalidateOnFocus","revalidateOnReconnect","refreshWhenOffline","refreshWhenHidden","refreshInterval","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAIMA,EAAqB,wCADX,OA0BDC,EAvBF,uCAAG,WAAOC,EAAcC,GAArB,qBAAAC,EAAA,6DACNC,EAAcC,IAAGC,UAAUC,YAAOC,IAAD,OAAUN,QAAV,IAAUA,IAAU,KACvDO,EAAMD,YAAQJ,GAClBL,EAAwBE,EACxBF,EAAwBE,EAAO,IAAMG,EAJzB,SAMIM,MAAMD,GANV,WAMRE,EANQ,QAULC,GAVK,wBAWNC,EAAQ,IAAIC,MAAM,8CAXZ,SAaOH,EAAII,OAbX,aAaZF,EAAMG,KAbM,OAcZH,EAAMI,OAASN,EAAIM,OACbJ,EAfM,iCAkBPF,EAAII,QAlBG,4CAAH,wDCmCEG,EARc,YAA2C,IAArCC,EAAoC,EAApCA,OAC3BjB,EAASkB,mBAAQ,iBAAO,CAAED,YAAW,CAACA,IAI5C,OADuBE,YAhCJ,SAACnB,GAAD,OAAiB,SAACoB,EAAmBC,GACxD,OAAIA,IAAqBA,EAAiBC,SAAiB,KACpD,CAAC,2EAAD,OACsEF,EAAY,GACvFpB,IA4BuCuB,CAAavB,GAASF,EAAgB0B,ICXlEC,EAXC,YAA8B,IAAxBC,EAAuB,EAAvBA,OACd1B,EAASkB,mBAAQ,iBAAO,CAAEQ,OAAQA,KAAW,CAACA,IAOpD,OANkBC,YAChB,CAAC,+DAEC3B,K,2CCbA4B,EAAW,SAACC,GAChB,MAQIA,EAAMC,SAPRC,EADF,EACEA,MACAC,EAFF,EAEEA,aACAC,EAHF,EAGEA,WACAC,EAJF,EAIEA,MACAC,EALF,EAKEA,KACAC,EANF,EAMEA,YANF,IAOEC,MAASC,EAPX,EAOWA,aAAcC,EAPzB,EAOyBA,cAEzB,OACE,eAAC,IAAD,CAAKC,GAAG,OAAR,UACE,cAAC,IAAD,CAAMC,KAAMN,EAAMO,OAAO,QAAzB,SACE,cAAC,IAAD,CAAKC,WAAW,MAAhB,SAAuBT,MAEzB,eAAC,IAAD,CAAYU,QAAS,EAAGC,cAAc,OAAtC,UACE,eAAC,IAAD,WACE,cAAC,IAAD,oBACA,cAAC,IAAD,CAAKC,MAAOf,EAAQ,EAAI,WAAQgB,EAAhC,SAA4ChB,OAE9C,eAAC,IAAD,WACE,cAAC,IAAD,sBACA,cAAC,IAAD,UACE,cAAC,IAAD,CACEiB,EAAE,eACFC,EAAE,UACFC,GAAIlB,EAAe,GAAKI,EAAc,aAAUW,EAChDI,OACEnB,EAAe,IAAMI,EAAc,uBAAoBW,EAL3D,SAQGf,SAIP,eAAC,IAAD,WACE,cAAC,IAAD,qBACA,cAAC,IAAD,UAAMC,OAER,cAAC,IAAD,CAAKmB,UAAU,QAAf,SACE,eAAC,IAAD,CACEJ,EAAE,OACFK,SAAS,OACTC,eAAe,SACfF,UAAU,SAJZ,UAME,cAAC,IAAD,CAAKG,EAAE,OAAP,SACE,cAAC,IAAD,CAAQC,IAAKjB,MAEf,cAAC,IAAD,CAAKC,GAAG,MAAMiB,SAAS,OAAOF,EAAE,OAAhC,SACGjB,YAKT,cAAC,IAAD,QAqBSoB,EAZG,SAAC7B,GACjB,IAAQ8B,EAAc9B,EAAd8B,UAER,OACE,mCACGA,EAAUC,KAAI,SAAC9B,GAAD,OACb,cAAC,EAAD,CAAUA,SAAUA,GAAeA,EAAS+B,mBC7CrCC,EAvBF,SAACjC,GACZ,IAAQkC,EAAmClC,EAAnCkC,KAAMC,EAA6BnC,EAA7BmC,OAAQC,EAAqBpC,EAArBoC,iBAEtB,OACE,cAAC,IAAD,CAAKzB,GAAG,MAAR,SACE,cAAC,IAAD,CAAYK,cAAc,QAAQqB,QAAQ,OAA1C,SACGH,EAAKH,KAAI,SAACO,GAAD,OACR,cAAC,IAAD,CACEnB,EAAE,eACFS,SAAS,OACTW,OAAO,UAEPC,YAAaL,IAAWG,EAAIG,KAAO,YAASvB,EAC5CwB,QAAS,kBAAMN,EAAiBE,EAAIG,OANtC,SAQGH,EAAIG,MAJAH,EAAIG,cCRfE,EAAmB,SAAC3C,GACxB,IAAQkC,EAASlC,EAATkC,KACR,EAA4BU,mBAASV,EAAKW,MAAM,GAAGJ,MAAnD,mBAAON,EAAP,KAAeW,EAAf,KACA,EAKI3D,EAAoC,CACtCC,OAAQ+C,IALFY,EADR,EACEC,KACAC,EAFF,EAEEA,QACAC,EAHF,EAGEA,aAkBF,OArBA,EAIEpE,OAcC,IAID,eAAC,IAAD,CAAKqE,EAAE,sBAAsBC,SAAS,SAAtC,UACE,cAAC,IAAD,CAAKzC,GAAG,MAAR,sBACA,cAAC,EAAD,CACEuB,KAAMA,EAAKW,MACXV,OAAQA,EACRC,iBAdmB,SAACK,GACxBK,EAAUL,MAePM,GACC,qCACGA,EAAahB,KAAI,SAACD,GAAD,OAChB,eAAC,IAAD,WACE,cAAC,EAAD,CAAWA,UAAWA,EAAUe,QAC/BK,GACC,cAAC,IAAD,CAAK/B,EAAE,OAAOM,eAAe,SAASd,GAAG,OAAzC,SACE,cAAC,IAAD,CACE0C,UAAU,MACVC,MAAM,QACNC,WAAW,WACXtC,MAAM,WACNuC,KAAK,WATH1B,EAAUe,MAAM,GAAGb,iBAe7BkB,GAAgBH,EAAaA,EAAaU,OAAS,GAAGhE,UACtD,cAAC,IAAD,CAAK8B,UAAU,SAASZ,GAAG,OAA3B,SACE,cAAC,IAAD,CAAQ+B,QAxCI,WACtBO,GAAQ,SAACS,GAAD,OAAOA,EAAI,MAuCT,gCAsCCC,EA7BD,WACZ,MAA4Bf,mBAAS,IAArC,mBAAOgB,EAAP,KAAeC,EAAf,KACA,EAAwBjE,EAAkB,CACxCC,OAAQ+D,IADFZ,EAAR,EAAQA,KAQR,OARA,EAAclE,MASL,cAAC,IAAD,uCAIP,cAAC,IAAD,CAAKgF,KAAK,QAAQX,EAAE,QAAQY,OAAO,SAAS3C,EAAE,YAA9C,SACE,eAAC,IAAD,CAAK+B,EAAE,OAAP,UACE,cAAC,IAAD,CACEzB,EAAE,OACFsC,MAAOJ,EACPK,SAda,SAACC,GACpBL,EAAUK,EAAErD,OAAOmD,QAcbG,YAAY,wCAEZ,OAACnB,QAAD,IAACA,OAAD,EAACA,EAAMH,MAAMY,SAAU,cAAC,EAAD,CAAkBvB,KAAMc,U,SC3F5CrD,EAAa,CACxByE,mBAAmB,EACnBC,uBAAuB,EACvBC,oBAAoB,EACpBC,mBAAmB,EACnBC,gBAAiB,GAkBJC,MAff,WACE,OACE,cAAC,IAAD,UACE,cAAC,IAAD,CACET,MAAK,aACH/F,WACG0B,GAHP,SAME,cAAC,EAAD,SCRO+E,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1777d45b.chunk.js","sourcesContent":["import { isEmpty, reject } from 'ramda'\nimport qs from 'query-string'\n\nconst version = \"2.2\"\nconst stackoverflowEndpoint = `https://api.stackexchange.com/${version}`\n\nconst fetcher = async (path: string, params?: any) => {\n    const queryString = qs.stringify(reject(isEmpty, params ?? {}))\n  const url = isEmpty(queryString) ? \n    stackoverflowEndpoint + path :\n    stackoverflowEndpoint + path + '&' + queryString\n\n  const res = await fetch(url)\n\n  // If the status code is not in the range 200-299,\n  // we still try to parse and throw it.\n  if (!res.ok) {\n    const error = new Error('An error occurred while fetching the data.') as any\n    // Attach extra info to the error object.\n    error.info = await res.json()\n    error.status = res.status\n    throw error\n  }\n\n  return res.json()\n\n}\n\n\nexport default fetcher","import { useMemo } from \"react\"\nimport { useSWRInfinite } from \"swr\"\nimport { swrOptions } from \"../App\"\nimport fetcher from \"./fetcher\"\n\nconst createGetKey = (params: any) => (pageIndex: number, previousPageData: any) => {\n  if (previousPageData && !previousPageData.has_more) return null\n  return [\n    `/questions?pagesize=20&order=desc&sort=activity&site=stackoverflow&page=${pageIndex + 1}`, \n    params\n  ]\n}\nexport interface IQuestionData {\n  question_id: number\n  score: number\n  answer_count: number\n  view_count: number\n  title: string\n  link: string\n  is_answered: boolean\n  owner: {\n    display_name: string\n    profile_image: string\n  }\n}\nexport interface IQuestionsRes {\n  has_more: boolean,\n  items: IQuestionData[]\n}\ninterface IUseInfiniteQuestions {\n  tagged?: string\n}\n\nconst useInfiniteQuestions = <T>({ tagged }: IUseInfiniteQuestions) => {\n  const params = useMemo(() => ({ tagged }), [tagged])\n\n  // useSWRInfinite doesn't support global config\n  const questionsQuery = useSWRInfinite<T>(createGetKey(params), fetcher as any, swrOptions)\n  return questionsQuery\n}\n\nexport default useInfiniteQuestions","import { useMemo } from \"react\"\nimport useSWR from \"swr\"\nexport interface ITagData {\n  name: string\n}\nexport interface ITagsRes {\n  has_more: boolean,\n  items: ITagData[]\n}\n\ninterface IUseTags {\n  inname: string\n}\n\n\nconst useTags = <T>({ inname }: IUseTags) => {\n  const params = useMemo(() => ({ inname: inname }), [inname])\n  const tagsQuery = useSWR<T>(\n    [\n      `/tags?pagesize=10&order=desc&sort=popular&site=stackoverflow`, \n      params\n    ]\n  )\n  return tagsQuery\n}\n\nexport default useTags","import { Box, SimpleGrid, Avatar, Link, Divider } from \"@chakra-ui/react\";\nimport { IQuestionData } from \"../apis/useInfiniteQuestions\";\n\ninterface IQuestionProps {\n  question: IQuestionData;\n}\n\nconst Question = (props: IQuestionProps) => {\n  const {\n    score,\n    answer_count,\n    view_count,\n    title,\n    link,\n    is_answered,\n    owner: { display_name, profile_image },\n  } = props.question;\n  return (\n    <Box mt=\"10px\">\n      <Link href={link} target=\"blank\">\n        <Box fontWeight=\"800\">{title}</Box>\n      </Link>\n      <SimpleGrid columns={4} minChildWidth=\"80px\">\n        <Box>\n          <Box>Score</Box>\n          <Box color={score < 0 ? \"red\" : undefined}>{score}</Box>\n        </Box>\n        <Box>\n          <Box>Answers</Box>\n          <Box>\n            <Box\n              d=\"inline-block\"\n              p=\"3px 5px\"\n              bg={answer_count > 0 && is_answered ? \"green\" : undefined}\n              border={\n                answer_count > 0 && !is_answered ? \"1px solid green\" : undefined\n              }\n            >\n              {answer_count}\n            </Box>\n          </Box>\n        </Box>\n        <Box>\n          <Box>Viewed</Box>\n          <Box>{view_count}</Box>\n        </Box>\n        <Box textAlign=\"right\">\n          <Box\n            d=\"flex\"\n            flexWrap=\"wrap\"\n            justifyContent=\"center\"\n            textAlign=\"center\"\n          >\n            <Box w=\"100%\">\n              <Avatar src={profile_image} />\n            </Box>\n            <Box mt=\"8px\" fontSize=\"10px\" w=\"100%\">\n              {display_name}\n            </Box>\n          </Box>\n        </Box>\n      </SimpleGrid>\n      <Divider />\n    </Box>\n  );\n};\n\ninterface IQuestionsProps {\n  questions: IQuestionData[];\n}\n\nconst Questions = (props: IQuestionsProps) => {\n  const { questions } = props;\n\n  return (\n    <>\n      {questions.map((question) => (\n        <Question question={question} key={question.question_id} />\n      ))}\n    </>\n  );\n};\n\nexport default Questions;\n","import { Box, Button, SimpleGrid } from \"@chakra-ui/react\";\nimport { ITagData } from \"../apis/useTags\";\n\ninterface ITagsProps {\n  handleTagOnClick: (name: string) => void;\n  curTag: string;\n  tags: ITagData[];\n}\n\nconst Tags = (props: ITagsProps) => {\n  const { tags, curTag, handleTagOnClick } = props;\n\n  return (\n    <Box mt=\"5px\">\n      <SimpleGrid minChildWidth=\"100px\" spacing=\"10px\">\n        {tags.map((tag) => (\n          <Button\n            d=\"inline-block\"\n            fontSize=\"12px\"\n            cursor=\"pointer\"\n            key={tag.name}\n            colorScheme={curTag === tag.name ? \"blue\" : undefined}\n            onClick={() => handleTagOnClick(tag.name)}\n          >\n            {tag.name}\n          </Button>\n        ))}\n      </SimpleGrid>\n    </Box>\n  );\n};\n\nexport default Tags;\n","import { Input, Box, Spinner, Button } from \"@chakra-ui/react\";\nimport { ChangeEvent, useState } from \"react\";\nimport { useInfiniteQuestions, useTags } from \"../apis\";\nimport { IQuestionsRes } from \"../apis/useInfiniteQuestions\";\nimport { ITagsRes } from \"../apis/useTags\";\nimport Questions from \"./Questions\";\nimport Tags from \"./Tags\";\n\ninterface ITagsAndQuestions {\n  tags: ITagsRes;\n}\n\nconst TagsAndQuestions = (props: ITagsAndQuestions) => {\n  const { tags } = props;\n  const [curTag, setCurTag] = useState(tags.items[0].name);\n  const {\n    data: questionsArr,\n    setSize,\n    isValidating,\n    error,\n  } = useInfiniteQuestions<IQuestionsRes>({\n    tagged: curTag,\n  });\n\n  const handleFetchMore = () => {\n    setSize((s) => s + 1);\n  };\n\n  const handleTagOnClick = (name: string) => {\n    setCurTag(name);\n  };\n\n  if (error) {\n    <Box>Something went wrong :_(</Box>;\n  }\n\n  return (\n    <Box h=\"calc(100vh - 110px)\" overflow=\"scroll\">\n      <Box mt=\"5px\">Trending</Box>\n      <Tags\n        tags={tags.items}\n        curTag={curTag}\n        handleTagOnClick={handleTagOnClick}\n      />\n      {questionsArr && (\n        <>\n          {questionsArr.map((questions: IQuestionsRes) => (\n            <Box key={questions.items[0].question_id}>\n              <Questions questions={questions.items} />\n              {isValidating && (\n                <Box d=\"flex\" justifyContent=\"center\" mt=\"10px\">\n                  <Spinner\n                    thickness=\"4px\"\n                    speed=\"0.65s\"\n                    emptyColor=\"gray.200\"\n                    color=\"blue.500\"\n                    size=\"xl\"\n                  />\n                </Box>\n              )}\n            </Box>\n          ))}\n          {!isValidating && questionsArr[questionsArr.length - 1].has_more && (\n            <Box textAlign=\"center\" mt=\"10px\">\n              <Button onClick={handleFetchMore}>Load More</Button>\n            </Box>\n          )}\n        </>\n      )}\n    </Box>\n  );\n};\n\nconst Index = () => {\n  const [search, setSearch] = useState(\"\");\n  const { data, error } = useTags<ITagsRes>({\n    inname: search,\n  });\n\n  const handleSearch = (e: ChangeEvent<any>) => {\n    setSearch(e.target.value);\n  };\n\n  if (error) {\n    return <Box>Something went wrong :_(</Box>;\n  }\n\n  return (\n    <Box maxW=\"800px\" h=\"100vh\" margin=\"0 auto\" p=\"30px 30px\">\n      <Box h=\"50px\">\n        <Input\n          w=\"100%\"\n          value={search}\n          onChange={handleSearch}\n          placeholder=\"Input the tag you want to search\"\n        ></Input>\n        {!!data?.items.length && <TagsAndQuestions tags={data} />}\n      </Box>\n    </Box>\n  );\n};\n\nexport default Index;\n","import { SWRConfig } from \"swr\";\nimport QuestionSearch from \"./questionSearch\";\nimport fetcher from \"./apis/fetcher\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nexport const swrOptions = {\n  revalidateOnFocus: false,\n  revalidateOnReconnect: false,\n  refreshWhenOffline: false,\n  refreshWhenHidden: false,\n  refreshInterval: 0,\n};\n\nfunction App() {\n  return (\n    <ChakraProvider>\n      <SWRConfig\n        value={{\n          fetcher,\n          ...swrOptions,\n        }}\n      >\n        <QuestionSearch />\n      </SWRConfig>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}